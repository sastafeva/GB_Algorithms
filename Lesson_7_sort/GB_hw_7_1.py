# 1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами
# на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
# Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.

from random import shuffle

size = 100
array = [i for i in range(-size, size)]
shuffle(array)  # перемешать массив
print(array)

# Короткий вариант массива (чтобы удобно было проверить, как работает сортировка)
# array_test = [i for i in range(7)]
# shuffle(array_test)
# print(array_test)

# Будем повторять цикл while до тех пор, пока есть что менять. Если мы зашли в цикл и не сделали ни одной замены,
# тогда выходим из цикла. Таким образом мы можем сократить минимальное время сортировки.
# Максимальная сложность так и останется O(n^2)


def bubble(array):
    n = 1
    mark = True

    while mark:
        mark = False

        for i in range(len(array) - n):

            if array[i] < array[i+1]:
                array[i], array[i+1] = array[i+1], array[i]
                mark = True

        n += 1
        # print(array)

# Функция ничего не возвращает, но сортирует массив.
# Можно вывести на печать отсортированный массив после выполнения функции.
bubble(array)
print(array)

# Печать для короткого массива
# bubble(array_test)
# print(array_test)
